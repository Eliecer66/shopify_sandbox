<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" defer> </script>

<!-- variables -->
{% assign selected_variant = product.selected_or_first_available_variant %}

<style>
  .swiper-button-prev, .swiper-button-next {
    color: black;
  }

  .swiper-button-prev::after, .swiper-button-next::after {
    font-size: 20px;
  }

  .swiper-pagination {
    color: black;
    bottom: 0 !important;
  }

  .swiper-pagination-bullet-active {
    background: black !important;
  }

  .product--information {
    height: fit-content;
    padding: 1rem;
  }

  .swiper {
      width: 100%;
      height: 300px;
      margin-left: auto;
      margin-right: auto;
    }

    .swiper-slide {
      background-size: cover;
      background-position: center;
    }

    .mySwiper2 {
      height: 80%;
      width: 100%;
    }

    .mySwiper {
      height: 20%;
      box-sizing: border-box;
    }

    .mySwiper .swiper-slide {
      width: 25%;
      height: 100%;
      opacity: 0.4;
    }

    .mySwiper .swiper-slide-thumb-active {
      opacity: 1;
    }

    .swiper-slide img {
      display: block;
      width: 100%;
      max-width: 450px;
      height: 100%;
      object-fit: cover;
    }
</style>
<div class="max-w-6xl mx-auto my-8 mt-20">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
    <div>
      <div class="product--information">
        <div class="swiper mySwiper2 ">
          <div class="swiper-wrapper">
            {% for media in product.media %}
              <div class="swiper-slide">
                <div class="h-full overflow-hidden p-2 flex justify-center">
                  {% render "product-media", media: media%}
                </div>
              </div>
            {% endfor %}
          </div>
            <div class="swiper-pagination"></div>
            <div class="swiper-button-prev"></div>
            <div class="swiper-button-next"></div>
        </div>
        <div thumbsSlider="" class="swiper mySwiper">
          <div class="swiper-wrapper">
            {% for media in product.media %}
              <div class="swiper-slide">
                <img
                width="auto"
                height="auto"
                src="{{ media | image_url }}"
                />
              </div>
            {% endfor%}
          </div>
        </div>
      </div>
      {% if product.metafields.custom.media_gallery.value != blank %}
        <div class="hidden md:block">
          {% for media in product.metafields.custom.media_gallery.value %}
            <div class="h-100 overflow-hidden p-2">
              {% render "product-media", media: media %}
            </div>
          {% endfor %}
        </div>
      {% endif %}
    </div>
    <div class="product--information sticky top-5 p-2">
      {% form "product", product, id: "product-form", novalidate: "novalidate" %}
      <input type="hidden" name="id" value={{ selected_variant.id }}>
      {% for block in section.blocks %}
        <div class="flex flex-col justify-evenly items-start h-full w-full gap-2">
          {% case block.type %}
            {% when "vendor" %}
              <div class="my-3 flex justify-center w-full">
                <span class="text-gray-700"> {{ product.vendor }} </span>
              </div>
            {% when "title" %}
              <div class="my-3 flex justify-center w-full">
                <h2
                  style="font-size: {{ block.settings.font_size }}px"
                  class="text-gray-700 font-serif"
                >
                  {{ product.title }}
                </h2>
              </div>
            {% when "price" %}
              <div
                class="my-3 flex justify-center gap-2 items-center w-full h-full p-2 font-serif"
                id="price-{{ section.id }}"
              >
                <span class="text-2xl text-gray-500 line-through" >{{ selected_variant.compare_at_price | money }} </span>
                <span class="text-3xl text-gray-900" >{{ selected_variant.price | money }} </span>
                {% if selected_variant.price < selected_variant.compare_at_price %}
                  <span class="px-5 py-1 text-sm font-bold bg-gray-800 rounded-full text-white mx-4" >Sale</span>
                {% endif %}
              </div>
              {% when "ralationated_products" %}
                {% if product.metafields.custom.relationated_products.value != blank%}
                  <div class="w-full flex justify-center">
                    <p class="text-xl text-gray-600 font-serif"> {{ block.settings.ralationated_products }} </p>
                  </div>
                  <div class="flex w-full justify-center" >
                    {% for relationated in product.metafields.custom.relationated_products.value %}
                      <a
                        href="{{ relationated.url }}"
                        >
                        <img
                        src="{{ relationated.featured_image | image_url }}"
                        width="auto"
                        height="auto"
                        class="w-20 h-20"
                        />
                      </a>
                      {% endfor %}
                  </div>
                {% endif %}
            {% when "variant_selector" %}
              <div class="my-3 w-full" >
                {% unless product.has_only_default_variant %}
                  <variant-selector
                    variant-element
                    data-url="{{ product.url }}"
                    data-section="{{ section.id }}"
                    class="flex flex-col items-start gap-4"
                  >
                    {% for option in product.options_with_values %}
                      {% if option.name == "Color" %}
                        <div class="flex flex-col gap-2 w-full">
                          <label
                            id="{{ option.name | escape }}"
                            name="{{ option.name }}"
                            class="text-lg font-serif"
                            for="Option-{{ section.id }}-{{ forloop.index0 }}"
                          >
                            {{ option.name }}: {{ option.selected_value }}
                          </label>
                          <div class="flex gap-2">
                            {% for color in option.values %}
                              <input
                                id="{{ color.id }}"
                                type="radio"
                                name="color-selected"
                                value="{{ color.name }}"
                                class="sr-only peer"
                                {% if color.selected %}
                                  checked
                                {% endif %}
                              >
                              <label
                                for="{{ color.id }}"
                                class="w-8 h-8 rounded-full border border-gray-300 cursor-pointer transition"
                                style="background-color: {{ color.swatch.color }};"
                                title="{{ color.swatch.color }}"
                              >
                                <span class="sr-only">{{ color.name }}</span>
                              </label>
                            {% endfor %}
                          </div>
                        </div>
                        {% else %}
                          <label
                            id="{{ option.name | escape }}"
                            name="{{ option.name }}"
                            class="text-lg font-serif"
                            for="Option-{{ section.id }}-{{ forloop.index0 }}"
                          >
                            {{ option.name }}: {{ option.selected_value }}
                          </label>
                          <div class="my-2 w-full" >
                            <select
                              name="options[{{ option.name | escape }}]"
                              id="Option-{{ section.id }}-{{ forloop.index0 }}"
                              class="w-full border px-3 py-1"
                            >
                              {% for value in option.values %}
                                <option
                                  value="{{ value | escape }}"
                                  {% if option.selected_value == value %}
                                    selected="selected"
                                  {% endif%}
                                >
                                  {{ value }}
                                </option>
                              {% endfor %}
                            </select>
                          </div>
                        {% endif%}
                      {% endfor %}
                      <script type="application/json" >
                        {{ product.variants | json }}
                      </script>
                  </variant-selector>
              {% endunless %}
              </div>
            {% when "quantity" %}
              <quantity-element
                class="my-3 flex flex-col w-full items-center font-serif text-xl text-gray-700"
              >
                <label for="quantity-{{ section.id }}"> Quantity </label>
                <div class="flex my-2 border-2 border-gray-400 max-w-40 justify-center">
                  <button
                    name="minus"
                    type="button"
                    class="p-4 text-lg"
                  >
                    -
                  </button>
                  <input
                    class="w-full flex text-center text-lg"
                    type="number"
                    name="quantity"
                    id="quantity-{{ section.id }}"
                    value="1"
                    min="1"
                  >
                  <button
                    name="plus"
                    type="button"
                    class="p-4 text-lg"
                  >
                    +
                  </button>
                </div>
              </quantity-element>
            {% when "stock" %}
              <div
                data-stock-content
                id="stock_variant"
                class="flex w-full justify-center"
              >
                {% render "product-stock", variants: product.variants %}
              </div>
            {% when "description" %}
              <div class="my-3">
                <p class="text-gray-600 text-xl/8 font-serif">
                {{ product.description }}
                </p>
              </div>
            {% when "checkout_buttons" %}
              <div class="flex justify-center w-full my-3">
                <div class="w-full">
                  <button
                    type="submit"
                    name="add"
                    class="w-full px-6 py-4 bg-gray-900 text-white hover:bg-gray-700 rounde-sm my-2"
                    {% if product.selected_or_first_available_variant.available == false %}
                      disabled
                    {% endif %}
                    >
                    {% if product.selected_or_first_available_variant.available == false %}
                      Sold out
                    {% else %}
                      Add to cart
                    {% endif %}
                  </button>
                </div>
              </div>
            {% else %}
          {% endcase %}
        </div>
      {% endfor %}
      {% endform %}
    </div>
  </div>
</div>

<script>
  class VariantSelector extends HTMLElement {
    constructor() {
      super();
      this.addEventListener("change", this.onVariantChange);
    }

    onVariantChange() {
      this.getSelectedOptions();
      this.getSelectedVariant();

      if (this.currentVariant) {
        this.updateURL();
        this.updateFormID();
        this.updatePrice();
        this.updatePlaceholder()
      }
    }

    updatePlaceholder() {
      const url = window.location.pathname + window.location.search;
      fetch(url)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');

          const variantContainer = doc.querySelectorAll("[variant-element]")[0]
          this.variantContainer.innerHTML = variantContainer.innerHTML;

          const stockHTML = doc.querySelector('[data-stock-content]');
          this.stockVariant.innerHTML = stockHTML.innerHTML;
        }).catch((error) =>
          console.log("There's an error: ", error)
        )
    }

    getSelectedOptions() {
      this.options = Array
        .from(this.querySelectorAll("select"), (select) => select.value)
      this.labelsOptions = Array
          .from(this.querySelectorAll("label"), (select) => select)
      this.stockVariant = document.getElementById("stock_variant");
      this.variantContainer = document.querySelectorAll("[variant-element]")[0]

      const inputsVariant = Array
        .from(this.querySelectorAll("input"))
        .find(element => element.checked === true)

      if (inputsVariant !== undefined) {
        this.options.push(inputsVariant.value);
      }
    }

    // This get from the product data the information needed
    getVariantJSON() {
      this.variantData = this.variant || JSON.parse(this.querySelector('[type="application/json"]').textContent);
      return this.variantData;
    }

    getSelectedVariant() {
      this.currentVariant = this.getVariantJSON()
        .find((variant) => {
          const variantFound = JSON.stringify(variant.options.sort()) === JSON.stringify(this.options.sort());
          if (variantFound) {
            return variant;
            // if (this.labelsOptions.length > 1) {
            //   this.labelOption = this.labelsOptions[index];
            // } else {
            //   this.labelOption = this.labelsOptions[0];
            // }
          }

          // console.log(JSON.stringify(variant.options.sort()), JSON.stringify(this.options.sort()))
          // console.log(variantFound);
          // const findings = variant.options
          //   .map((option, index) => {
          //     let match = false;
          //     this.options.forEach((data) => {
          //       if (data === option) {
          //         match = true;
          //         if (this.labelsOptions.length > 1) {
          //           this.labelOption = this.labelsOptions[index];
          //         } else {
          //           this.labelOption = this.labelsOptions[0];
          //         }
          //       }
          //     })
          //     return match;
          //   }).includes(true)
          //
          // if (findings) return variant;
        })

      console.log(this.currentVariant)
    }

    updateURL() {
      if (!this.currentVariant) return;
      window.history.replaceState({}, "",`${this.dataset.url}?variant=${this.currentVariant.id}`)
    }

    updateFormID() {
      const form_input = document.querySelector("#product-form").querySelector("input[name='id']");
      form_input.value = this.currentVariant.id;
    }

    updatePrice() {
      fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
        .then(response => response.text())
        .then((responseText) => {
          const id = `price-${this.dataset.section}`;
          const html = new DOMParser().parseFromString(responseText, "text/html");

          const oldPrice = document.getElementById(id);
          const newPrice = html.getElementById(id);

          if (oldPrice && newPrice) {
            oldPrice.innerHTML = newPrice.innerHTML;
          }
        })
    }
  }
  customElements.define("variant-selector", VariantSelector)
</script>

<script>
  console.log(JSON.parse(document.querySelector("[metafields-data]").textContent))
</script>

<script>
  const BUTTON = "BUTTON";
  const PLUS = "plus"

  class QuantityElement extends HTMLElement {

    constructor() {
      super();
      this.quantity = null;
      this.addEventListener("click", (element) => this.onQuantityChange(element))
    }

    onQuantityChange(element) {
      if (element.srcElement.tagName === BUTTON) {
        this.quantity = document.getElementsByName("quantity")[0];
        let newQuantity = parseInt(this.quantity.value);

        if (element.srcElement.name === PLUS) {
          newQuantity = newQuantity + 1;
        } else {
          if (newQuantity > 1) {
            newQuantity = newQuantity - 1;
          }
        }
        this.quantity.value = newQuantity.toString();
      }
    }
  }

  customElements.define("quantity-element", QuantityElement)
</script>

<script>
  // document.addEventListener("DOMContentLoaded", function() {
  //   try {
  //     const swiper = new Swiper(".swiper", {
  //       direction: "horizontal",
  //       pagination: {
  //         el: ".swiper-pagination"
  //       },
  //       navigation: {
  //         prevEl: ".swiper-button-prev",
  //         nextEl: ".swiper-button-next"
  //       }
  //     })
  //   } catch (error) {
  //     console.log("Swiper is not defined ")
  //   }
  // })
  document.addEventListener("DOMContentLoaded", function() {
    try {
      const swiper = new Swiper(".mySwiper", {
        spaceBetween: 9,
        slidesPerView: 4,
        freeMode: true,
        watchSlidesProgress: true,
      });
      var swiper2 = new Swiper(".mySwiper2", {
        spaceBetween: 9,
        navigation: {
          nextEl: ".swiper-button-next",
          prevEl: ".swiper-button-prev",
        },
        thumbs: {
          swiper: swiper,
        },
      });
    } catch {
      console.log("Swiper is not defined ")
    }
  })
</script>

{% schema %}
  {
    "name":"Product",
    "blocks": [
      {
        "type": "vendor",
        "name": "Vendor",
        "limit": 1
      },{
        "type": "price",
        "name": "Price",
        "limit": 1
      },{
        "type": "title",
        "name": "Title",
        "limit": 1,
        "settings": [
          {
            "id": "font_size",
            "type": "range",
            "min": 50,
            "max": 100,
            "unit": "px",
            "label": "Size",
            "default": 50,
            "step": 10
          }
        ]
      },{
        "type": "variant_selector",
        "name": "Variant Selector",
        "limit": 1
      },{
        "type": "quantity",
        "name": "Quantity",
        "limit": 1
      }, {
        "type": "description",
        "name": "Description",
        "limit": 1
      }, {
        "type": "checkout_buttons",
        "name": "Checkout Buttons",
        "limit": 1
      }, {
        "type": "ralationated_products",
        "name": "Relationated products",
        "limit": 1,
        "settings": [
          {
            "type": "text",
            "id": "ralationated_products",
            "label": "Variant Title",
            "default": "Also Comes In: "
          }
        ]
      },{
        "type": "stock",
        "name": "Stock",
        "limit": 1
      }
    ]
  }
  {% endschema %}
